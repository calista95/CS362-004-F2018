        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 536 returned 100% blocks executed 100%
      536:    8:int compare(const void* a, const void* b) {
      536:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
      169:   10:    return 1;
      367:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
      161:   12:    return -1;
      206:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 100%
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 18 returned 100% blocks executed 100%
       18:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       18:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       18:  209:  if (state->deckCount[player] < 1)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        1:  210:    return -1;
       17:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      290:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
      256:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      256:  216:    newDeck[newDeckPos] = state->deck[player][card];
      256:  217:    newDeckPos++;
     1328:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
     1072:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      256:  221:    state->deckCount[player]--;
        -:  222:  }
      273:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
      256:  224:    state->deck[player][i] = newDeck[i];
      256:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       17:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 50 returned 100% blocks executed 80%
       50:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       50:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       50:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       50:  243:  if ( state->numActions < 1 )
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
        -:  244:    {
       42:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        8:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
        8:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        8:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        8:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        8:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        8:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 38 returned 100% blocks executed 79%
       38:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       38:  280:  who = state->whoseTurn;
        -:  281:
       38:  282:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       38:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       38:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       38:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       38:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
       38:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
       38:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       38:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 304 returned 100% blocks executed 100%
      304:  311:int numHandCards(struct gameState *state) {
      304:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 616 returned 100% blocks executed 100%
      616:  315:int handCard(int handPos, struct gameState *state) {
      616:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      616:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 76 returned 100% blocks executed 100%
       76:  320:int supplyCount(int card, struct gameState *state) {
       76:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 1008 returned 100% blocks executed 100%
     1008:  346:int whoseTurn(struct gameState *state) {
     1008:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 40 returned 100% blocks executed 100%
       40:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       40:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
      256:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
      216:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      216:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
       40:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       40:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       20:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       20:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       40:  370:  state->outpostPlayed = 0;
       40:  371:  state->phase = 0;
       40:  372:  state->numActions = 1;
       40:  373:  state->coins = 0;
       40:  374:  state->numBuys = 1;
       40:  375:  state->playedCardCount = 0;
       40:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      240:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      200:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
       40:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
       40:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 41 returned 100% blocks executed 82%
       41:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       41:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       40:  401:  j = 0;
     1040:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     1000:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
       40:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
       40:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 2 returned 100% blocks executed 66%
        2:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        2:  420:  int score = 0;
        -:  421:  //score from hand
        7:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  423:    {
        5:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       23:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  434:    {
       21:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       21:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
       21:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       21:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
       21:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       21:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       23:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  445:    {
       21:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       21:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
       21:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       21:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       21:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       21:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  452:    }
        -:  453:
        2:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 226 returned 100% blocks executed 92%
      226:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      226:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      251:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
      236:  534:      state->deck[player][i] = state->discard[player][i];
      236:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       15:  538:    state->deckCount[player] = state->discardCount[player];
       15:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       15:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       15:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       15:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       15:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       15:  559:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  560:      return -1;
        -:  561:
       15:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       15:  563:    state->deckCount[player]--;
       15:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      211:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      211:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      211:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      211:  576:    state->deckCount[player]--;
      211:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      226:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 76 returned 100% blocks executed 23%
       76:  583:int getCost(int cardNumber)
        -:  584:{
       76:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 21%
branch  4 taken 0%
branch  5 taken 42%
branch  6 taken 26%
branch  7 taken 5%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 5%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       16:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       32:  598:      return 3;
        -:  599:    case gold:
       20:  600:      return 6;
        -:  601:    case adventurer:
        4:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        4:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://refactored functions (we want these cards to work even if they are called outside of cardEffect())
function smithyFunction called 0 returned 0% blocks executed 0%
    #####:  647:int smithyFunction(struct gameState*state, int handPos)
        -:  648:{
    #####:  649:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  650:	int i;
    #####:  651:	for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  652:	 	{
    #####:  653:			  drawCard(currentPlayer, state);
call    0 never executed
        -:  654:	  	}
        -:  655:	 			
        -:  656:	 //discard card from hand
    #####:  657:	 discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  658:	       return 0;
        -:  659:
        -:  660:}
        -:  661:
function adventurerFunction called 0 returned 0% blocks executed 0%
    #####:  662:int adventurerFunction(struct gameState*state)
        -:  663:{
    #####:  664:	 int drawntreasure=0;
    #####:  665:	 int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  666:	 int temphand[MAX_HAND];// moved above the if statement
        -:  667:	 int cardDrawn;
    #####:  668:	 int z=0;
    #####:  669:	 while(drawntreasure<2)
branch  0 never executed
branch  1 never executed
        -:  670:	 {
    #####:  671:	  	if (state->deckCount[currentPlayer] <1)
branch  0 never executed
branch  1 never executed
        -:  672:		{           //if the deck is empty we need to shuffle discard and add to deck
    #####:  673:	 	  shuffle(currentPlayer, state);
call    0 never executed
        -:  674:		} 
    #####:  675:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  676:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  677:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  678:				  drawntreasure++;
        -:  679:		else
        -:  680:			{
    #####:  681:			  temphand[z]=cardDrawn;
    #####:  682:		  	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  683:		  	  z++;
        -:  684:		 	}
        -:  685:	  }
    #####:  686:         while(z-1>=0)
branch  0 never executed
branch  1 never executed
        -:  687:	 {
    #####:  688:	 	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  689:		z=z-1;
        -:  690:         }
    #####:  691:	 return 0;
        -:  692:}
        -:  693:
function villageFunction called 0 returned 0% blocks executed 0%
    #####:  694:int villageFunction(struct gameState*state, int handPos)
        -:  695:{
    #####:  696:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  697:	//+1 Card
    #####:  698:	drawCard(currentPlayer, state);
call    0 never executed
        -:  699:	//+2 Actions
    #####:  700:	state->numActions = state->numActions + 2;
        -:  701:	//discard played card from hand
    #####:  702:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  703:        return 0;
        -:  704:}
        -:  705:
function greatHallFunction called 0 returned 0% blocks executed 0%
    #####:  706:int greatHallFunction(struct gameState*state, int handPos)
        -:  707:{
    #####:  708:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  709:	//+1 Card
    #####:  710:	drawCard(currentPlayer, state);
call    0 never executed
        -:  711:	//+1 Actions
    #####:  712:	state->numActions++;
        -:  713:	//discard card from hand
    #####:  714:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  715:	return 0;
        -:  716:}
        -:  717:
function cardEffect called 8 returned 100% blocks executed 10%
        8:  718:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  719:{
        -:  720:  int i;
        -:  721:  int j;
        -:  722:  int k;
        -:  723:  int x;
        -:  724:  int index;
        8:  725:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        8:  726:  int nextPlayer = currentPlayer + 1;
        -:  727:
        8:  728:  int tributeRevealedCards[2] = {-1, -1};
        -:  729:  int temphand[MAX_HAND];// moved above the if statement
        8:  730:  int drawntreasure=0;
        -:  731:  int cardDrawn;
        8:  732:  int z = 0;// this is the counter for the temp hand
        8:  733:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        6:  734:    nextPlayer = 0;
        -:  735:  }
        -:  736:  
        -:  737:	
        -:  738:  //uses switch to select card and perform actions
        8:  739:  switch( card ) 
branch  0 taken 75%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  740:    {
        -:  741:    case adventurer:
       27:  742:      while(drawntreasure<2){
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       15:  743:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        1:  744:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -:  745:	}
       15:  746:	drawCard(currentPlayer, state);
call    0 returned 100%
       15:  747:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       15:  748:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
branch  4 taken 25% (fallthrough)
branch  5 taken 75%
       12:  749:	  drawntreasure++;
        -:  750:	else{
        3:  751:	  temphand[z]=cardDrawn;
        3:  752:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3:  753:	  z++;
        -:  754:	}
        -:  755:      }
       15:  756:      while(z-1>=0){
branch  0 taken 33%
branch  1 taken 67% (fallthrough)
        3:  757:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        3:  758:	z=z-1;
        -:  759:      }
        6:  760:      return 0;
        -:  761:			
        -:  762:    case council_room:
        -:  763:      //+4 Cards
    #####:  764:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  765:	{
    #####:  766:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  767:	}
        -:  768:			
        -:  769:      //+1 Buy
    #####:  770:      state->numBuys++;
        -:  771:			
        -:  772:      //Each other player draws a card
    #####:  773:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  774:	{
    #####:  775:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  776:	    {
    #####:  777:	      drawCard(i, state);
call    0 never executed
        -:  778:	    }
        -:  779:	}
        -:  780:			
        -:  781:      //put played card in played card pile
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  783:			
    #####:  784:      return 0;
        -:  785:			
        -:  786:    case feast:
        -:  787:      //gain card with cost up to 5
        -:  788:      //Backup hand
    #####:  789:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  790:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  791:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  792:      }
        -:  793:      //Backup hand
        -:  794:
        -:  795:      //Update Coins for Buy
    #####:  796:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  797:      x = 1;//Condition to loop on
    #####:  798:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  799:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  800:	  if (DEBUG)
        -:  801:	    printf("None of that card left, sorry!\n");
        -:  802:
        -:  803:	  if (DEBUG){
        -:  804:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  805:	  }
        -:  806:	}
    #####:  807:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  808:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  809:
        -:  810:	  if (DEBUG){
        -:  811:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  812:	  }
        -:  813:	}
        -:  814:	else{
        -:  815:
        -:  816:	  if (DEBUG){
        -:  817:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  818:	  }
        -:  819:
    #####:  820:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  821:	  x = 0;//No more buying cards
        -:  822:
        -:  823:	  if (DEBUG){
        -:  824:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  825:	  }
        -:  826:
        -:  827:	}
        -:  828:      }     
        -:  829:
        -:  830:      //Reset Hand
    #####:  831:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  832:	state->hand[currentPlayer][i] = temphand[i];
    #####:  833:	temphand[i] = -1;
        -:  834:      }
        -:  835:      //Reset Hand
        -:  836:      			
    #####:  837:      return 0;
        -:  838:			
        -:  839:    case gardens:
    #####:  840:      return -1;
        -:  841:			
        -:  842:    case mine:
    #####:  843:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  844:
    #####:  845:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  846:	{
    #####:  847:	  return -1;
        -:  848:	}
        -:  849:		
    #####:  850:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:
    #####:  860:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  861:
        -:  862:      //discard card from hand
    #####:  863:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  864:
        -:  865:      //discard trashed card
    #####:  866:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  867:	{
    #####:  868:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  869:	    {
    #####:  870:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  871:	      break;
        -:  872:	    }
        -:  873:	}
        -:  874:			
    #####:  875:      return 0;
        -:  876:			
        -:  877:    case remodel:
    #####:  878:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  879:
    #####:  880:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  881:	{
    #####:  882:	  return -1;
        -:  883:	}
        -:  884:
    #####:  885:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  886:
        -:  887:      //discard card from hand
    #####:  888:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  889:
        -:  890:      //discard trashed card
    #####:  891:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  892:	{
    #####:  893:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  894:	    {
    #####:  895:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  896:	      break;
        -:  897:	    }
        -:  898:	}
        -:  899:
        -:  900:
    #####:  901:      return 0;
        -:  902:		
        -:  903:    case smithy:
        -:  904:      //+3 Cards
        8:  905:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  906:	{
        6:  907:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  908:	}
        -:  909:			
        -:  910:      //discard card from hand
        2:  911:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  912:      return 0;
        -:  913:		
        -:  914:    case village:
        -:  915:      //+1 Card
    #####:  916:      drawCard(currentPlayer, state);
call    0 never executed
        -:  917:			
        -:  918:      //+2 Actions
    #####:  919:      state->numActions = state->numActions + 2;
        -:  920:			
        -:  921:      //discard played card from hand
    #####:  922:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  923:      return 0;
        -:  924:		
        -:  925:    case baron:
    #####:  926:      state->numBuys++;//Increase buys by 1!
    #####:  927:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  928:	int p = 0;//Iterator for hand!
    #####:  929:	int card_not_discarded = 1;//Flag for discard set!
    #####:  930:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  931:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  932:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  933:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  934:	    state->discardCount[currentPlayer]++;
    #####:  935:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  936:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  937:	    }
    #####:  938:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  939:	    state->handCount[currentPlayer]--;
    #####:  940:	    card_not_discarded = 0;//Exit the loop
        -:  941:	  }
    #####:  942:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  943:	    if(DEBUG) {
        -:  944:	      printf("No estate cards in your hand, invalid choice\n");
        -:  945:	      printf("Must gain an estate if there are any\n");
        -:  946:	    }
    #####:  947:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  948:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  949:	      state->supplyCount[estate]--;//Decrement estates
    #####:  950:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  951:		isGameOver(state);
call    0 never executed
        -:  952:	      }
        -:  953:	    }
    #####:  954:	    card_not_discarded = 0;//Exit the loop
        -:  955:	  }
        -:  956:			    
        -:  957:	  else{
    #####:  958:	    p++;//Next card
        -:  959:	  }
        -:  960:	}
        -:  961:      }
        -:  962:			    
        -:  963:      else{
    #####:  964:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  965:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  966:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  967:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  968:	    isGameOver(state);
call    0 never executed
        -:  969:	  }
        -:  970:	}
        -:  971:      }
        -:  972:	    
        -:  973:      
    #####:  974:      return 0;
        -:  975:		
        -:  976:    case great_hall:
        -:  977:      //+1 Card
    #####:  978:      drawCard(currentPlayer, state);
call    0 never executed
        -:  979:			
        -:  980:      //+1 Actions
    #####:  981:      state->numActions++;
        -:  982:			
        -:  983:      //discard card from hand
    #####:  984:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  985:      return 0;
        -:  986:		
        -:  987:    case minion:
        -:  988:      //+1 action
    #####:  989:      state->numActions++;
        -:  990:			
        -:  991:      //discard card from hand
    #####:  992:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  993:			
    #####:  994:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  995:	{
    #####:  996:	  state->coins = state->coins + 2;
        -:  997:	}
        -:  998:			
    #####:  999:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1000:	{
        -: 1001:	  //discard hand
    #####: 1002:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1003:	    {
    #####: 1004:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1005:	    }
        -: 1006:				
        -: 1007:	  //draw 4
    #####: 1008:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1009:	    {
    #####: 1010:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1011:	    }
        -: 1012:				
        -: 1013:	  //other players discard hand and redraw if hand size > 4
    #####: 1014:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1015:	    {
    #####: 1016:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1017:		{
    #####: 1018:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1019:		    {
        -: 1020:		      //discard hand
    #####: 1021:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1022:			{
    #####: 1023:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1024:			}
        -: 1025:							
        -: 1026:		      //draw 4
    #####: 1027:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1028:			{
    #####: 1029:			  drawCard(i, state);
call    0 never executed
        -: 1030:			}
        -: 1031:		    }
        -: 1032:		}
        -: 1033:	    }
        -: 1034:				
        -: 1035:	}
    #####: 1036:      return 0;
        -: 1037:		
        -: 1038:    case steward:
    #####: 1039:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1040:	{
        -: 1041:	  //+2 cards
    #####: 1042:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1043:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1044:	}
    #####: 1045:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1046:	{
        -: 1047:	  //+2 coins
    #####: 1048:	  state->coins = state->coins + 2;
        -: 1049:	}
        -: 1050:      else
        -: 1051:	{
        -: 1052:	  //trash 2 cards in hand
    #####: 1053:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1054:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1055:	}
        -: 1056:			
        -: 1057:      //discard card from hand
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1059:      return 0;
        -: 1060:		
        -: 1061:    case tribute:
    #####: 1062:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1064:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	  state->deckCount[nextPlayer]--;
        -: 1066:	}
    #####: 1067:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1068:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1069:	  state->discardCount[nextPlayer]--;
        -: 1070:	}
        -: 1071:	else{
        -: 1072:	  //No Card to Reveal
        -: 1073:	  if (DEBUG){
        -: 1074:	    printf("No cards to reveal\n");
        -: 1075:	  }
        -: 1076:	}
        -: 1077:      }
        -: 1078:	    
        -: 1079:      else{
    #####: 1080:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1081:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1082:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1083:	    state->deckCount[nextPlayer]++;
    #####: 1084:	    state->discard[nextPlayer][i] = -1;
    #####: 1085:	    state->discardCount[nextPlayer]--;
        -: 1086:	  }
        -: 1087:			    
    #####: 1088:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1089:	} 
    #####: 1090:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1091:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1092:	state->deckCount[nextPlayer]--;
    #####: 1093:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1094:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1095:	state->deckCount[nextPlayer]--;
        -: 1096:      }    
        -: 1097:		       
    #####: 1098:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1099:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1100:	state->playedCardCount++;
    #####: 1101:	tributeRevealedCards[1] = -1;
        -: 1102:      }
        -: 1103:
    #####: 1104:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1105:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1106:	  state->coins += 2;
        -: 1107:	}
        -: 1108:		    
    #####: 1109:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1110:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1111:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1112:	}
        -: 1113:	else{//Action Card
    #####: 1114:	  state->numActions = state->numActions + 2;
        -: 1115:	}
        -: 1116:      }
        -: 1117:	    
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case ambassador:
    #####: 1121:      j = 0;		//used to check if player has enough cards to discard
        -: 1122:
    #####: 1123:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1124:	{
    #####: 1125:	  return -1;				
        -: 1126:	}
        -: 1127:
    #####: 1128:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  return -1;
        -: 1131:	}
        -: 1132:
    #####: 1133:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1136:	    {
    #####: 1137:	      j++;
        -: 1138:	    }
        -: 1139:	}
    #####: 1140:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  return -1;				
        -: 1143:	}
        -: 1144:
        -: 1145:      if (DEBUG) 
        -: 1146:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1147:
        -: 1148:      //increase supply count for choosen card by amount being discarded
    #####: 1149:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1150:			
        -: 1151:      //each other player gains a copy of revealed card
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1157:	    }
        -: 1158:	}
        -: 1159:
        -: 1160:      //discard played card from hand
    #####: 1161:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1162:
        -: 1163:      //trash copies of cards returned to supply
    #####: 1164:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1165:	{
    #####: 1166:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1167:	    {
    #####: 1168:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1169:		{
    #####: 1170:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1171:		  break;
        -: 1172:		}
        -: 1173:	    }
        -: 1174:	}			
        -: 1175:
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case cutpurse:
        -: 1179:
    #####: 1180:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1181:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1182:	{
    #####: 1183:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1184:	    {
    #####: 1185:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1186:		{
    #####: 1187:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1188:		    {
    #####: 1189:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1190:		      break;
        -: 1191:		    }
    #####: 1192:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1193:		    {
    #####: 1194:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1195:			{
        -: 1196:			  if (DEBUG)
        -: 1197:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1198:			}	
    #####: 1199:		      break;
        -: 1200:		    }		
        -: 1201:		}
        -: 1202:					
        -: 1203:	    }
        -: 1204:				
        -: 1205:	}				
        -: 1206:
        -: 1207:      //discard played card from hand
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1209:
    #####: 1210:      return 0;
        -: 1211:
        -: 1212:		
        -: 1213:    case embargo: 
        -: 1214:      //+2 Coins
    #####: 1215:      state->coins = state->coins + 2;
        -: 1216:			
        -: 1217:      //see if selected pile is in play
    #####: 1218:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1219:	{
    #####: 1220:	  return -1;
        -: 1221:	}
        -: 1222:			
        -: 1223:      //add embargo token to selected supply pile
    #####: 1224:      state->embargoTokens[choice1]++;
        -: 1225:			
        -: 1226:      //trash card
    #####: 1227:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1228:      return 0;
        -: 1229:		
        -: 1230:    case outpost:
        -: 1231:      //set outpost flag
    #####: 1232:      state->outpostPlayed++;
        -: 1233:			
        -: 1234:      //discard card
    #####: 1235:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1236:      return 0;
        -: 1237:		
        -: 1238:    case salvager:
        -: 1239:      //+1 buy
    #####: 1240:      state->numBuys++;
        -: 1241:			
    #####: 1242:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1243:	{
        -: 1244:	  //gain coins equal to trashed card
    #####: 1245:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1246:	  //trash card
    #####: 1247:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1248:	}
        -: 1249:			
        -: 1250:      //discard card
    #####: 1251:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1252:      return 0;
        -: 1253:		
        -: 1254:    case sea_hag:
    #####: 1255:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1256:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1257:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1258:	  state->discardCount[i]++;
    #####: 1259:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1260:	}
        -: 1261:      }
    #####: 1262:      return 0;
        -: 1263:		
        -: 1264:    case treasure_map:
        -: 1265:      //search hand for another treasure_map
    #####: 1266:      index = -1;
    #####: 1267:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1268:	{
    #####: 1269:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1270:	    {
    #####: 1271:	      index = i;
    #####: 1272:	      break;
        -: 1273:	    }
        -: 1274:	}
    #####: 1275:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1276:	{
        -: 1277:	  //trash both treasure cards
    #####: 1278:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1279:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1280:
        -: 1281:	  //gain 4 Gold cards
    #####: 1282:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1283:	    {
    #####: 1284:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1285:	    }
        -: 1286:				
        -: 1287:	  //return success
    #####: 1288:	  return 1;
        -: 1289:	}
        -: 1290:			
        -: 1291:      //no second treasure_map found in hand
    #####: 1292:      return -1;
        -: 1293:    }
        -: 1294:	
    #####: 1295:  return -1;
        -: 1296:}
        -: 1297:
function discardCard called 2 returned 100% blocks executed 78%
        2: 1298:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1299:{
        -: 1300:	
        -: 1301:  //if card is not trashed, added to Played pile 
        2: 1302:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1303:    {
        -: 1304:      //add card to played pile
        2: 1305:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1306:      state->playedCardCount++;
        -: 1307:    }
        -: 1308:	
        -: 1309:  //set played card to -1
        2: 1310:  state->hand[currentPlayer][handPos] = -1;
        -: 1311:	
        -: 1312:  //remove card from player's hand
        2: 1313:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1314:    {
        -: 1315:      //reduce number of cards in hand
    #####: 1316:      state->handCount[currentPlayer]--;
        -: 1317:    }
        2: 1318:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1319:    {
        -: 1320:      //reduce number of cards in hand
    #####: 1321:      state->handCount[currentPlayer]--;
        -: 1322:    }
        -: 1323:  else 	
        -: 1324:    {
        -: 1325:      //replace discarded card with last card in hand
        2: 1326:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1327:      //set last card to -1
        2: 1328:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1329:      //reduce number of cards in hand
        2: 1330:      state->handCount[currentPlayer]--;
        -: 1331:    }
        -: 1332:	
        2: 1333:  return 0;
        -: 1334:}
        -: 1335:
function gainCard called 38 returned 100% blocks executed 70%
       38: 1336:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1337:{
        -: 1338:  //Note: supplyPos is enum of choosen card
        -: 1339:	
        -: 1340:  //check if supply pile is empty (0) or card is not used in game (-1)
       38: 1341:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1342:    {
    #####: 1343:      return -1;
        -: 1344:    }
        -: 1345:	
        -: 1346:  //added card for [whoseTurn] current player:
        -: 1347:  // toFlag = 0 : add to discard
        -: 1348:  // toFlag = 1 : add to deck
        -: 1349:  // toFlag = 2 : add to hand
        -: 1350:
       38: 1351:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1352:    {
    #####: 1353:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1354:      state->deckCount[player]++;
        -: 1355:    }
       38: 1356:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1357:    {
    #####: 1358:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1359:      state->handCount[player]++;
        -: 1360:    }
        -: 1361:  else
        -: 1362:    {
       38: 1363:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       38: 1364:      state->discardCount[player]++;
        -: 1365:    }
        -: 1366:	
        -: 1367:  //decrease number in supply pile
       38: 1368:  state->supplyCount[supplyPos]--;
        -: 1369:	 
       38: 1370:  return 0;
        -: 1371:}
        -: 1372:
function updateCoins called 49 returned 100% blocks executed 100%
       49: 1373:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1374:{
        -: 1375:  int i;
        -: 1376:	
        -: 1377:  //reset coin count
       49: 1378:  state->coins = 0;
        -: 1379:
        -: 1380:  //add coins for each Treasure card in player's hand
      310: 1381:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1382:    {
      261: 1383:      if (state->hand[player][i] == copper)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
        -: 1384:	{
      109: 1385:	  state->coins += 1;
        -: 1386:	}
      152: 1387:      else if (state->hand[player][i] == silver)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -: 1388:	{
       65: 1389:	  state->coins += 2;
        -: 1390:	}
       87: 1391:      else if (state->hand[player][i] == gold)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        -: 1392:	{
       13: 1393:	  state->coins += 3;
        -: 1394:	}	
        -: 1395:    }	
        -: 1396:
        -: 1397:  //add bonus
       49: 1398:  state->coins += bonus;
        -: 1399:
       49: 1400:  return 0;
        -: 1401:}
        -: 1402:
        -: 1403:
        -: 1404://end of dominion.c
        -: 1405:
