        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     1460:    8:int compare(const void* a, const void* b) {
     1460:    9:  if (*(int*)a > *(int*)b)
      272:   10:    return 1;
     1188:   11:  if (*(int*)a < *(int*)b)
      399:   12:    return -1;
      789:   13:  return 0;
        -:   14:}
        -:   15:
       18:   16:struct gameState* newGame() {
       18:   17:  struct gameState* g = malloc(sizeof(struct gameState));
       18:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       28:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       28:   44:  SelectStream(1);
       28:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       28:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        8:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       20:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      160:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1552:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1412:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
        6:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       14:   73:  if (numPlayers == 2)
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        9:   77:  else if (numPlayers == 3)
        -:   78:    {
        2:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        7:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       14:   87:  if (numPlayers == 2)
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        9:   95:      state->supplyCount[estate] = 12;
        9:   96:      state->supplyCount[duchy] = 12;
        9:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       14:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  102:  state->supplyCount[silver] = 40;
       14:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     2310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2170:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      140:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       54:  115:		  if (numPlayers == 2){ 
        9:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       18:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      113:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2030:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       58:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       44:  140:      state->deckCount[i] = 0;
      176:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      132:  143:	  state->deck[i][j] = estate;
      132:  144:	  state->deckCount[i]++;
        -:  145:	}
      352:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      308:  148:	  state->deck[i][j] = copper;
      308:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       58:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       44:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       58:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       44:  166:      state->handCount[i] = 0;
       44:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      392:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      378:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       14:  182:  state->outpostPlayed = 0;
       14:  183:  state->phase = 0;
       14:  184:  state->numActions = 1;
       14:  185:  state->numBuys = 1;
       14:  186:  state->playedCardCount = 0;
       14:  187:  state->whoseTurn = 0;
       14:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       84:  192:  for (it = 0; it < 5; it++){
       70:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       14:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       14:  198:  return 0;
        -:  199:}
        -:  200:
      105:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      105:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      105:  209:  if (state->deckCount[player] < 1)
        4:  210:    return -1;
      101:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1143:  214:  while (state->deckCount[player] > 0) {
      941:  215:    card = floor(Random() * state->deckCount[player]);
      941:  216:    newDeck[newDeckPos] = state->deck[player][card];
      941:  217:    newDeckPos++;
     3356:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     2415:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      941:  221:    state->deckCount[player]--;
        -:  222:  }
     1042:  223:  for (i = 0; i < newDeckPos; i++) {
      941:  224:    state->deck[player][i] = newDeck[i];
      941:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      101:  228:  return 0;
        -:  229:}
        -:  230:
       43:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       43:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       43:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       43:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        7:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
        7:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
        -:  270:}
        -:  271:
      282:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      282:  280:  who = state->whoseTurn;
        -:  281:
      282:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        3:  285:    return -1;
      279:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       50:  289:    return -1;
      229:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        8:  293:    return -1;
        -:  294:  } else {
      221:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
      221:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
      221:  299:    state->coins = (state->coins) - (getCost(supplyPos));
      221:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
      221:  308:  return 0;
        -:  309:}
        -:  310:
      350:  311:int numHandCards(struct gameState *state) {
      350:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
      554:  315:int handCard(int handPos, struct gameState *state) {
      554:  316:  int currentPlayer = whoseTurn(state);
      554:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      767:  320:int supplyCount(int card, struct gameState *state) {
      767:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    36867:  346:int whoseTurn(struct gameState *state) {
    36867:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
      105:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
      105:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      677:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      572:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      572:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
      105:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
      105:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       69:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       36:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
      105:  370:  state->outpostPlayed = 0;
      105:  371:  state->phase = 0;
      105:  372:  state->numActions = 1;
      105:  373:  state->coins = 0;
      105:  374:  state->numBuys = 1;
      105:  375:  state->playedCardCount = 0;
      105:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      630:  380:  for (k = 0; k < 5; k++){
      525:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
      105:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
      105:  387:  return 0;
        -:  388:}
        -:  389:
       38:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       38:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       37:  401:  j = 0;
      962:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      925:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
       37:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
       37:  414:  return 0;
        -:  415:}
        -:  416:
        2:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        2:  420:  int score = 0;
        -:  421:  //score from hand
        7:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
        5:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
        5:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
        5:  427:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       20:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
       18:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
       18:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
       18:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
       18:  438:      if (state->discard[player][i] == province) { score = score + 6; };
       18:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       18:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       20:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
       18:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
       18:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
       18:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
       18:  449:      if (state->deck[player][i] == province) { score = score + 6; };
       18:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       18:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        2:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      708:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      708:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      562:  533:    for (i = 0; i < state->discardCount[player];i++){
      501:  534:      state->deck[player][i] = state->discard[player][i];
      501:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       61:  538:    state->deckCount[player] = state->discardCount[player];
       61:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       61:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       61:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       61:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       61:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       61:  559:    if (deckCounter == 0)
        4:  560:      return -1;
        -:  561:
       57:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       57:  563:    state->deckCount[player]--;
       57:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      647:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      647:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      647:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      647:  576:    state->deckCount[player]--;
      647:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      704:  580:  return 0;
        -:  581:}
        -:  582:
      477:  583:int getCost(int cardNumber)
        -:  584:{
      477:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
       23:  588:      return 0;
        -:  589:    case estate:
       19:  590:      return 2;
        -:  591:    case duchy:
       17:  592:      return 5;
        -:  593:    case province:
       34:  594:      return 8;
        -:  595:    case copper:
       95:  596:      return 0;
        -:  597:    case silver:
      115:  598:      return 3;
        -:  599:    case gold:
       75:  600:      return 6;
        -:  601:    case adventurer:
       26:  602:      return 6;
        -:  603:    case council_room:
       22:  604:      return 5;
        -:  605:    case feast:
       23:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        2:  612:      return 4;
        -:  613:    case smithy:
        6:  614:      return 4;
        -:  615:    case village:
        3:  616:      return 3;
        -:  617:    case baron:
        2:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
       17:  647:int adventurerRefactor(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[MAX_HAND], int z)
        -:  648:{
        -:  649:    int cardDrawn;
       76:  650:    while(drawntreasure<2){
       42:  651:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  652:    shuffle(currentPlayer, state);
        -:  653:  }
       42:  654:  drawCard(currentPlayer, state);
       42:  655:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       42:  656:  if (cardDrawn == copper || cardDrawn == silver)//bug: (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       34:  657:    drawntreasure++;
        -:  658:  else{
        8:  659:    temphand[z]=cardDrawn;
        8:  660:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        8:  661:    z++;
        -:  662:  }
        -:  663:      }
       42:  664:      while(z-1>=0){
        8:  665:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        8:  666:  z=z-1;
        -:  667:      }
       17:  668:      return 0;
        -:  669:}
        -:  670:
        5:  671:int council_roomRefactor(int currentPlayer, struct gameState *state, int handPos)
        -:  672:{
        -:  673:   //+4 Cards
        -:  674: /*     for (int i = 0; i < 4; i++)
        -:  675:  {
        -:  676:    drawCard(currentPlayer, state);
        -:  677:  }*/ //bug
        -:  678:      
        -:  679:      //+1 Buy
        5:  680:      state->numBuys++;
        -:  681:      
        -:  682:      //Each other player draws a card
       25:  683:      for (int i = 0; i < state->numPlayers; i++)
        -:  684:  {
       20:  685:    if ( i != currentPlayer )
        -:  686:      {
       15:  687:        drawCard(i, state);
        -:  688:      }
        -:  689:
        -:  690:  }
        -:  691:      
        -:  692:      //put played card in played card pile
        5:  693:      discardCard(handPos, currentPlayer, state, 0);
        5:  694:            return 0;
        -:  695:
        -:  696:}
        -:  697:
       22:  698:int smithyRefactor(int currentPlayer, struct gameState *state, int handPos)
        -:  699:{
        -:  700:    //+3 Cards
       66:  701:      for (int i = 0; i < 2; i++)// bug: change 3 to 2
        -:  702:  {
       44:  703:    drawCard(currentPlayer, state);
        -:  704:  }
        -:  705:      
        -:  706:      //discard card from hand
       22:  707:      discardCard(handPos, currentPlayer, state, 0);
        -:  708:
       22:  709:      return 0;
        -:  710:}
        -:  711:
    #####:  712:int remodelRefactor(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -:  713:{
    #####:  714:   int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  715:
    #####:  716:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  717:  {
    #####:  718:    return -1;
        -:  719:  }
        -:  720:
        -:  721:    // gainCard(choice2, state, 0, currentPlayer);//bug
        -:  722:
        -:  723:      //discard card from hand
    #####:  724:      discardCard(handPos, currentPlayer, state, 0);
        -:  725:
        -:  726:      //discard trashed card
    #####:  727:      for (int i = 0; i < state->handCount[currentPlayer]; i++)
        -:  728:  {
    #####:  729:    if (state->hand[currentPlayer][i] == j)
        -:  730:      {
    #####:  731:        discardCard(i, currentPlayer, state, 0);      
    #####:  732:        break;
        -:  733:      }
        -:  734:  }
    #####:  735:return 0;
        -:  736:}
        -:  737:
       12:  738:int villageRefactor(int currentPlayer, struct gameState *state, int handPos)
        -:  739:{
        -:  740:   //+1 Card
       12:  741:      drawCard(currentPlayer, state);
        -:  742:      
        -:  743:      //+2 Actions
       12:  744:      state->numActions = state->numActions + 2;
        -:  745:      
        -:  746:      //discard played card from hand
       12:  747:      discardCard(handPos, currentPlayer, state, 0);
       12:  748:      return 0;
        -:  749:    
        -:  750:}
        -:  751:
       56:  752:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  753:{
        -:  754:  int i;
        -:  755:  int j;
        -:  756:  int k;
        -:  757:  int x;
        -:  758:  int index;
       56:  759:  int currentPlayer = whoseTurn(state);
       56:  760:  int nextPlayer = currentPlayer + 1;
        -:  761:
       56:  762:  int tributeRevealedCards[2] = {-1, -1};
        -:  763:  int temphand[MAX_HAND];// moved above the if statement
       56:  764:  int drawntreasure=0;
        -:  765:  //int cardDrawn;
       56:  766:  int z = 0;// this is the counter for the temp hand
       56:  767:  if (nextPlayer > (state->numPlayers - 1)){
       17:  768:    nextPlayer = 0;
        -:  769:  }
        -:  770:  
        -:  771:	
        -:  772:  //uses switch to select card and perform actions
       56:  773:  switch( card ) 
        -:  774:    {
        -:  775:    case adventurer:
       17:  776:      return adventurerRefactor(drawntreasure,state,currentPlayer,temphand,z);
        -:  777:			
        -:  778:    case council_room:
        -:  779:     
        -:  780:			
        5:  781:      return council_roomRefactor(currentPlayer, state, handPos);
        -:  782:			
        -:  783:    case feast:
        -:  784:      //gain card with cost up to 5
        -:  785:      //Backup hand
    #####:  786:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  787:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  788:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  789:      }
        -:  790:      //Backup hand
        -:  791:
        -:  792:      //Update Coins for Buy
    #####:  793:      updateCoins(currentPlayer, state, 5);
    #####:  794:      x = 1;//Condition to loop on
    #####:  795:      while( x == 1) {//Buy one card
    #####:  796:	if (supplyCount(choice1, state) <= 0){
        -:  797:	  if (DEBUG)
        -:  798:	    printf("None of that card left, sorry!\n");
        -:  799:
        -:  800:	  if (DEBUG){
        -:  801:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  802:	  }
        -:  803:	}
    #####:  804:	else if (state->coins < getCost(choice1)){
    #####:  805:	  printf("That card is too expensive!\n");
        -:  806:
        -:  807:	  if (DEBUG){
        -:  808:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  809:	  }
        -:  810:	}
        -:  811:	else{
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  815:	  }
        -:  816:
    #####:  817:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  818:	  x = 0;//No more buying cards
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  822:	  }
        -:  823:
        -:  824:	}
        -:  825:      }     
        -:  826:
        -:  827:      //Reset Hand
    #####:  828:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  829:	state->hand[currentPlayer][i] = temphand[i];
    #####:  830:	temphand[i] = -1;
        -:  831:      }
        -:  832:      //Reset Hand
        -:  833:      			
    #####:  834:      return 0;
        -:  835:			
        -:  836:    case gardens:
    #####:  837:      return -1;
        -:  838:			
        -:  839:    case mine:
    #####:  840:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  841:
    #####:  842:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  843:	{
    #####:  844:	  return -1;
        -:  845:	}
        -:  846:		
    #####:  847:      if (choice2 > treasure_map || choice2 < curse)
        -:  848:	{
    #####:  849:	  return -1;
        -:  850:	}
        -:  851:
    #####:  852:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  853:	{
    #####:  854:	  return -1;
        -:  855:	}
        -:  856:
    #####:  857:      gainCard(choice2, state, 2, currentPlayer);
        -:  858:
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
        -:  861:
        -:  862:      //discard trashed card
    #####:  863:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  864:	{
    #####:  865:	  if (state->hand[currentPlayer][i] == j)
        -:  866:	    {
    #####:  867:	      discardCard(i, currentPlayer, state, 0);			
    #####:  868:	      break;
        -:  869:	    }
        -:  870:	}
        -:  871:			
    #####:  872:      return 0;
        -:  873:			
        -:  874:    case remodel:
    #####:  875:     return remodelRefactor(currentPlayer, state, handPos, choice1, choice2);
        -:  876:		
        -:  877:    case smithy:
       22:  878:       return  smithyRefactor(currentPlayer,state,handPos);
        -:  879:    		
        -:  880:    case village:
       12:  881:     return villageRefactor(currentPlayer, state, handPos);
        -:  882:    case baron:
    #####:  883:      state->numBuys++;//Increase buys by 1!
    #####:  884:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  885:	int p = 0;//Iterator for hand!
    #####:  886:	int card_not_discarded = 1;//Flag for discard set!
    #####:  887:	while(card_not_discarded){
    #####:  888:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  889:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  890:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  891:	    state->discardCount[currentPlayer]++;
    #####:  892:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  893:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  894:	    }
    #####:  895:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  896:	    state->handCount[currentPlayer]--;
    #####:  897:	    card_not_discarded = 0;//Exit the loop
        -:  898:	  }
    #####:  899:	  else if (p > state->handCount[currentPlayer]){
        -:  900:	    if(DEBUG) {
        -:  901:	      printf("No estate cards in your hand, invalid choice\n");
        -:  902:	      printf("Must gain an estate if there are any\n");
        -:  903:	    }
    #####:  904:	    if (supplyCount(estate, state) > 0){
    #####:  905:	      gainCard(estate, state, 0, currentPlayer);
    #####:  906:	      state->supplyCount[estate]--;//Decrement estates
    #####:  907:	      if (supplyCount(estate, state) == 0){
    #####:  908:		isGameOver(state);
        -:  909:	      }
        -:  910:	    }
    #####:  911:	    card_not_discarded = 0;//Exit the loop
        -:  912:	  }
        -:  913:			    
        -:  914:	  else{
    #####:  915:	    p++;//Next card
        -:  916:	  }
        -:  917:	}
        -:  918:      }
        -:  919:			    
        -:  920:      else{
    #####:  921:	if (supplyCount(estate, state) > 0){
    #####:  922:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  923:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  924:	  if (supplyCount(estate, state) == 0){
    #####:  925:	    isGameOver(state);
        -:  926:	  }
        -:  927:	}
        -:  928:      }
        -:  929:	    
        -:  930:      
    #####:  931:      return 0;
        -:  932:		
        -:  933:    case great_hall:
        -:  934:      //+1 Card
    #####:  935:      drawCard(currentPlayer, state);
        -:  936:			
        -:  937:      //+1 Actions
    #####:  938:      state->numActions++;
        -:  939:			
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
    #####:  942:      return 0;
        -:  943:		
        -:  944:    case minion:
        -:  945:      //+1 action
    #####:  946:      state->numActions++;
        -:  947:			
        -:  948:      //discard card from hand
    #####:  949:      discardCard(handPos, currentPlayer, state, 0);
        -:  950:			
    #####:  951:      if (choice1)		//+2 coins
        -:  952:	{
    #####:  953:	  state->coins = state->coins + 2;
        -:  954:	}
        -:  955:			
    #####:  956:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  957:	{
        -:  958:	  //discard hand
    #####:  959:	  while(numHandCards(state) > 0)
        -:  960:	    {
    #####:  961:	      discardCard(handPos, currentPlayer, state, 0);
        -:  962:	    }
        -:  963:				
        -:  964:	  //draw 4
    #####:  965:	  for (i = 0; i < 4; i++)
        -:  966:	    {
    #####:  967:	      drawCard(currentPlayer, state);
        -:  968:	    }
        -:  969:				
        -:  970:	  //other players discard hand and redraw if hand size > 4
    #####:  971:	  for (i = 0; i < state->numPlayers; i++)
        -:  972:	    {
    #####:  973:	      if (i != currentPlayer)
        -:  974:		{
    #####:  975:		  if ( state->handCount[i] > 4 )
        -:  976:		    {
        -:  977:		      //discard hand
    #####:  978:		      while( state->handCount[i] > 0 )
        -:  979:			{
    #####:  980:			  discardCard(handPos, i, state, 0);
        -:  981:			}
        -:  982:							
        -:  983:		      //draw 4
    #####:  984:		      for (j = 0; j < 4; j++)
        -:  985:			{
    #####:  986:			  drawCard(i, state);
        -:  987:			}
        -:  988:		    }
        -:  989:		}
        -:  990:	    }
        -:  991:				
        -:  992:	}
    #####:  993:      return 0;
        -:  994:		
        -:  995:    case steward:
    #####:  996:      if (choice1 == 1)
        -:  997:	{
        -:  998:	  //+2 cards
    #####:  999:	  drawCard(currentPlayer, state);
    #####: 1000:	  drawCard(currentPlayer, state);
        -: 1001:	}
    #####: 1002:      else if (choice1 == 2)
        -: 1003:	{
        -: 1004:	  //+2 coins
    #####: 1005:	  state->coins = state->coins + 2;
        -: 1006:	}
        -: 1007:      else
        -: 1008:	{
        -: 1009:	  //trash 2 cards in hand
    #####: 1010:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1011:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1012:	}
        -: 1013:			
        -: 1014:      //discard card from hand
    #####: 1015:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
        -: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
        -: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
        -: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
        -: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
        -: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
        -: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
        -: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
        -: 1095:	    }
        -: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1114:	    }
        -: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
        -: 1130:	    }
        -: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
        -: 1158:		}
        -: 1159:					
        -: 1160:	    }
        -: 1161:				
        -: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:	}
        -: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
        -: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
        -: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
        -: 1253:}
        -: 1254:
       39: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
       39: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
       39: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       39: 1263:      state->playedCardCount++;
        -: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
       39: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
       39: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
       39: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
       39: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
       39: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
       39: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
       39: 1290:  return 0;
        -: 1291:}
        -: 1292:
      221: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
      221: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
      221: 1308:  if (toFlag == 1)
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
        -: 1312:    }
      221: 1313:  else if (toFlag == 2)
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
        -: 1317:    }
        -: 1318:  else
        -: 1319:    {
      221: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      221: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
      221: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
      221: 1327:  return 0;
        -: 1328:}
        -: 1329:
      126: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
      126: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
      768: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
      642: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
      383: 1342:	  state->coins += 1;
        -: 1343:	}
      259: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
       61: 1346:	  state->coins += 2;
        -: 1347:	}
      198: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
        9: 1350:	  state->coins += 3;
        -: 1351:	}	
        -: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
      126: 1355:  state->coins += bonus;
        -: 1356:
      126: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
