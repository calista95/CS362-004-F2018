        -:    0:Source:playdom.c
        -:    0:Graph:playdom.gcno
        -:    0:Data:playdom.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <stdio.h>
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:
function main called 1 returned 100% blocks executed 98%
        1:    6:int main (int argc, char** argv) {
        -:    7:  struct gameState G;
        1:    8:  int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:    9:           sea_hag, tribute, smithy};
        -:   10:
        1:   11:  printf ("Starting game.\n");
call    0 returned 100%
        -:   12:
        1:   13:  initializeGame(2, k, atoi(argv[1]), &G);
call    0 returned 100%
call    1 returned 100%
        -:   14:
        1:   15:  int money = 0;
        1:   16:  int smithyPos = -1;
        1:   17:  int adventurerPos = -1;
        1:   18:  int i=0;
        -:   19:
        1:   20:  int numSmithies = 0;
        1:   21:  int numAdventurers = 0;
        -:   22:
       39:   23:  while (!isGameOver(&G)) {
call    0 returned 100%
branch  1 taken 97%
branch  2 taken 3% (fallthrough)
       37:   24:    money = 0;
       37:   25:    smithyPos = -1;
       37:   26:    adventurerPos = -1;
      222:   27:    for (i = 0; i < numHandCards(&G); i++) {
call    0 returned 100%
branch  1 taken 83%
branch  2 taken 17% (fallthrough)
      185:   28:      if (handCard(i, &G) == copper)
call    0 returned 100%
branch  1 taken 43% (fallthrough)
branch  2 taken 57%
       80:   29:    money++;
      105:   30:      else if (handCard(i, &G) == silver)
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
       42:   31:    money += 2;
       63:   32:      else if (handCard(i, &G) == gold)
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 87%
        8:   33:    money += 3;
       55:   34:      else if (handCard(i, &G) == smithy)
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
        3:   35:    smithyPos = i;
       52:   36:      else if (handCard(i, &G) == adventurer)
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
        5:   37:    adventurerPos = i;
        -:   38:    }
        -:   39:
       37:   40:    if (whoseTurn(&G) == 0) {
call    0 returned 100%
branch  1 taken 51% (fallthrough)
branch  2 taken 49%
       19:   41:      if (smithyPos != -1) {
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        2:   42:        printf("0: smithy played from position %d\n", smithyPos);
call    0 returned 100%
        2:   43:        playCard(smithyPos, -1, -1, -1, &G);
call    0 returned 100%
        2:   44:        printf("smithy played.\n");
call    0 returned 100%
        2:   45:        money = 0;
        2:   46:        i=0;
       16:   47:        while(i<numHandCards(&G)){
call    0 returned 100%
branch  1 taken 86%
branch  2 taken 14% (fallthrough)
       12:   48:          if (handCard(i, &G) == copper){
call    0 returned 100%
branch  1 taken 58% (fallthrough)
branch  2 taken 42%
        7:   49:            playCard(i, -1, -1, -1, &G);
call    0 returned 100%
        7:   50:            money++;
        -:   51:          }
        5:   52:          else if (handCard(i, &G) == silver){
call    0 returned 100%
branch  1 taken 60% (fallthrough)
branch  2 taken 40%
        3:   53:            playCard(i, -1, -1, -1, &G);
call    0 returned 100%
        3:   54:            money += 2;
        -:   55:          }
        2:   56:          else if (handCard(i, &G) == gold){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   57:            playCard(i, -1, -1, -1, &G);
call    0 never executed
    #####:   58:            money += 3;
        -:   59:          }
       12:   60:          i++;
        -:   61:        }
        -:   62:      }
        -:   63:
       19:   64:      if (money >= 8) {
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        4:   65:        printf("0: bought province\n");
call    0 returned 100%
        4:   66:        buyCard(province, &G);
call    0 returned 100%
        -:   67:      }
       15:   68:      else if (money >= 6) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        5:   69:        printf("0: bought gold\n");
call    0 returned 100%
        5:   70:        buyCard(gold, &G);
call    0 returned 100%
        -:   71:      }
       10:   72:      else if ((money >= 4) && (numSmithies < 2)) {
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        2:   73:        printf("0: bought smithy\n");
call    0 returned 100%
        2:   74:        buyCard(smithy, &G);
call    0 returned 100%
        2:   75:        numSmithies++;
        -:   76:      }
        8:   77:      else if (money >= 3) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        6:   78:        printf("0: bought silver\n");
call    0 returned 100%
        6:   79:        buyCard(silver, &G);
call    0 returned 100%
        -:   80:      }
        -:   81:
       19:   82:      printf("0: end turn\n");
call    0 returned 100%
       19:   83:      endTurn(&G);
call    0 returned 100%
        -:   84:    }
        -:   85:    else {
       18:   86:      if (adventurerPos != -1) {
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        5:   87:        printf("1: adventurer played from position %d\n", adventurerPos);
call    0 returned 100%
        5:   88:        playCard(adventurerPos, -1, -1, -1, &G);
call    0 returned 100%
        5:   89:        money = 0;
        5:   90:        i=0;
       45:   91:        while(i<numHandCards(&G)){
call    0 returned 100%
branch  1 taken 88%
branch  2 taken 13% (fallthrough)
       35:   92:          if (handCard(i, &G) == copper){
call    0 returned 100%
branch  1 taken 34% (fallthrough)
branch  2 taken 66%
       12:   93:            playCard(i, -1, -1, -1, &G);
call    0 returned 100%
       12:   94:            money++;
        -:   95:          }
       23:   96:          else if (handCard(i, &G) == silver){
call    0 returned 100%
branch  1 taken 57% (fallthrough)
branch  2 taken 43%
       13:   97:            playCard(i, -1, -1, -1, &G);
call    0 returned 100%
       13:   98:            money += 2;
        -:   99:          }
       10:  100:          else if (handCard(i, &G) == gold){
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
        1:  101:            playCard(i, -1, -1, -1, &G);
call    0 returned 100%
        1:  102:            money += 3;
        -:  103:          }
       35:  104:          i++;
        -:  105:        }
        -:  106:      }
        -:  107:
       18:  108:      if (money >= 8) {
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        4:  109:        printf("1: bought province\n");
call    0 returned 100%
        4:  110:        buyCard(province, &G);
call    0 returned 100%
        -:  111:      }
       14:  112:      else if ((money >= 6) && (numAdventurers < 2)) {
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        2:  113:        printf("1: bought adventurer\n");
call    0 returned 100%
        2:  114:        buyCard(adventurer, &G);
call    0 returned 100%
        2:  115:        numAdventurers++;
       12:  116:      }else if (money >= 6){
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        2:  117:        printf("1: bought gold\n");
call    0 returned 100%
        2:  118:	    buyCard(gold, &G);
call    0 returned 100%
        -:  119:        }
       10:  120:      else if (money >= 3){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10:  121:        printf("1: bought silver\n");
call    0 returned 100%
       10:  122:	    buyCard(silver, &G);
call    0 returned 100%
        -:  123:      }
       18:  124:      printf("1: endTurn\n");
call    0 returned 100%
        -:  125:
       18:  126:      endTurn(&G);
call    0 returned 100%
        -:  127:    }
        -:  128:  } // end of While
        -:  129:
        1:  130:  printf ("Finished game.\n");
call    0 returned 100%
        1:  131:  printf ("Player 0: %d\nPlayer 1: %d\n", scoreFor(0, &G), scoreFor(1, &G));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  132:
        1:  133:  return 0;
        -:  134:}
